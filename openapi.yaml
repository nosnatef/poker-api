swagger: '2.0'
info:
  title: Poker API
  description: Design for Poker API
  version: v1
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
schemes:
  - https
host: api.oregonstate.edu
basePath: /v1
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/poker-api
produces:
  - application/json
paths:
  /games:
    post:
      summary: Create a poker game
      tags:
        - games
      consumes:
        - application/json
      operationId: postGame
      parameters:
        - in: body
          name: requestBody
          schema:
            $ref: '#/definitions/GamePostBody'
      responses:
        '201':
          description: Successfully create a game
          schema:
            $ref: '#/definitions/GameResult'
          headers:
            Location:
              type: string
              format: url
              description: Location of the newly created game
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    get:
      summary: Info of a list of game
      tags:
        - games
      operationId: getGames
      parameters: 
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/gameList'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
            
  /games/{gameId}:
    get:
      summary: Info for a specific game
      tags:
        - games
      description: Get a game by its gameid
      operationId: getGameById
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GameResult'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
        - games
      summary: Update a game specified by its id
      operationId: updateGameById
      consumes:
        - application/json
      parameters: 
        - $ref: '#/parameters/gameId'
        - name: updateBody
          in: body
          description: Object that will overwrite the game specified by its id
          required: true
          schema:
            $ref: '#/definitions/GameUpdateBody'
      responses:
        '200':
          description: Successfully update a game
          schema:
            $ref: '#/definitions/GameResult'
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - games
      summary: "Remove a game specified by its id"
      operationId: removeGameById
      parameters:
        - $ref: '#/parameters/gameId'
      responses:
        204:
          description: "game successfully removed"
        404:
          description: "No game with this id"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /games/{gameId}/players:
    get:
      summary: Get a list of players in the game
      tags:
        - games
      description: get players by game id
      operationId: getPlayersBygameId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PlayerResults'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
  /players/{playerId}:
    get:
      summary: Info for a specific player in a game
      tags:
        - players
      description: get player by player id
      operationId: getPlayerById
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/playerId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PlayerResult'
        '404':
          description: Plyaer not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    put:
      tags:
        - players
      summary: Update a player specified by its id
      operationId: updatePlayerById
      consumes:
        - application/json
      parameters: 
        - $ref: '#/parameters/playerId'
        - name: updateBody
          in: body
          description: Object that will overwrite the player specified by its id
          required: true
          schema:
            $ref: '#/definitions/PlayerUpdateBody'
      responses:
        '200':
          description: Successfully update a Player
          schema:
            $ref: '#/definitions/PlayerResult'
        '400':
          description: Invalid player object
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - players
      summary: "Remove a player specified by its id"
      operationId: removePlayerById
      consumes:
        - "application/json"
      parameters:
        - $ref: '#/parameters/playerId'
      responses:
        204:
          description: "player successfully removed"
        404:
          description: "No player with this id"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
parameters:
  authorization:
    name: Authorization
    in: header
    type: string
    required: true
    description: '"Bearer [token]" where token is your OAuth2 access token'
  gameId:
    name: gameId
    in: path
    description: unique string
    required: true
    type: string
  playerId:
    name: playerId
    in: path
    description: ID of player to be updated
    required: true
    type: string
    pattern: '^g[1-9]\d*p[1-9]\d*$'
definitions:
  GameResource:
    properties:
      id:
        $ref: '#/definitions/gameId'
      type:
        $ref: '#/definitions/gameType'
      attributes:
        type: object
        properties:
          round:
            $ref: '#/definitions/round'
          playerIds:
            $ref: '#/definitions/playerIds'
          tableCards:
            $ref: '#/definitions/cards'
      links:
        $ref: '#/definitions/SelfLink'
  players:
    type: array
    items:
      $ref: '#/definitions/player'
  player:
    type: object
    properties:
      cards:
        $ref: '#/definitions/cards'
      bet:
        $ref: '#/definitions/playerBet'
      status:
        $ref: '#/definitions/playerStatus'
  playerBet:
    type: integer
    minimum: 0
    description: Each player's bet
  playerStatus:
    type: string
    enum:
      - called
      - raised
      - checked
      - folded
  playerResource:
    properties:
      id:
        $ref: '#/definitions/playerId'
      type:
        $ref: '#/definitions/playerType'
      attributes:
        type: object
        properties:
          players:
            $ref: '#/definitions/players'
  card:
    properties:
      attributes:
        type: object
        properties:
          cardNumber:
            $ref: '#/definitions/cardNumber'
          cardSuit:
            $ref: '#/definitions/cardSuit'
  cardNumber:
    type: string
    enum: 
      - 'A'
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
      - '7'
      - '8'
      - '9'
      - '10'
      - 'J'
      - 'Q'
      - 'K'
  cardSuit:
    type: string
    enum:
      - 'Diamond'
      - 'Club'
      - 'Spade'
      - 'Heart'
      
  GamePostBody:
    properties:
      data:
        type: object
        properties:
          type:
            $ref: '#/definitions/gameType'
          attributes:
            type: object
            properties:
              playerIds:
                $ref: '#/definitions/playerIds'
              minimumBet:
                $ref: '#/definitions/minimumBet'
              maximumBet:
                $ref: '#/definitions/maximumBet'
            required:
              - playerIds
              - minimumBet
              - maximumBet
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
    required:
      - data
    additionalProperties: false
  
  GameUpdateBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/gameId'
          type:
            $ref: '#/definitions/gameType'
          attributes:
            type: object
            properties:
              round:
                $ref: '#/definitions/round'
              players:
                $ref: '#/definitions/players'
              tableCards:
                $ref: '#/definitions/cards'
            additionalProperties: false
        required: 
          - type
          - attributes
          - id
        additionalProperties: false
  PlayerUpdateBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/playerId'
          type:
            $ref: '#/definitions/playerType'
          attributes:
            type: object
            properties:
              player:
                $ref: '#/definitions/player'
            required:
              - player
            additionalProperties: false
        required: 
          - type
          - attributes
          - id
        additionalProperties: false
    required: 
      - data
    additionalProperties: false
  gameType:
    type: string
    enum:
      - game
  playerType:
    type: string
    enum:
      - player
  playerId:
    type: string
    example: '101'
  gameId:
    type: string
    description: A unique ID of a poker game
  minimumBet:
    type: integer
    minimum: 1
    description: The minimum bet every player have to place at least each round.
    example: 1000
  maximumBet:
    type: integer
    minimum: 1
    description: The maximum bet every player can place each round.
    example: 2000
  cards:
    type: array
    items:
      $ref: '#/definitions/card'
  playerIds:
    type: array
    items:
      $ref: '#/definitions/playerId'
  GameResult:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/GameResource'
  PlayerResult:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/playerResource'
  PlayerResults:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        type: array
        items:
          $ref: '#/definitions/playerResource'
  round:
    type: string
    enum:
      - 'blind'
      - 'flop'
      - 'turn'
      - 'river'
      - 'showdown'
  SelfLink:
    properties:
      self:
        type: string
        format: url
        description: Self-link of current resource
  gameList:
    type: array
    items:
      $ref: '#/definitions/GameResult'
  
  Error:
    properties:
      status:
        type: string
        description: HTTP status code
        example: '123'
      title:
        type: string
        description: A short, user readable summary of the error
        example: Not Found
      code:
        type: string
        description: An application-specific error code
        example: '1234'
      detail:
        type: string
        description: A long description of the error that may contain instance-specific details
      links:
        properties:
          about:
            type: string
            format: url
            description: A link to further information about the error
            example: https://developer.oregonstate.edu/documentation/error-reference#1234
  Errors:
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
              