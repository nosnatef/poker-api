swagger: '2.0'
info:
  title: Poker API
  description: Design for Poker API
  version: v1
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
schemes:
  - https
host: api.oregonstate.edu
basePath: /v1
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/poker-api
produces:
  - application/json
paths:
  /games:
    post:
      summary: Create a poker game
      tags:
        - games
      consumes:
        - application/json
      operationId: postGame
      parameters:
        - in: body
          name: requestBody
          schema:
            $ref: '#/definitions/GamePostBody'
      responses:
        '201':
          description: Successfully create a game
          schema:
            $ref: '#/definitions/GameResult'
          headers:
            Location:
              type: string
              format: url
              description: Location of the newly created game
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    get:
      summary: Info of a list of game
      tags:
        - games
      operationId: getGames
      parameters: 
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GameList'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
  /games/{gameId}:
    get:
      summary: Info for a specific game
      tags:
        - games
      description: Get a game by its gameid
      operationId: getGameByGameId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GameResult'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
        - games
      summary: Update a game specified by its id
      operationId: patchGameByGameId
      consumes:
        - application/json
      parameters: 
        - $ref: '#/parameters/gameId'
        - name: updateBody
          in: body
          description: Object that will overwrite the game specified by its id
          required: true
          schema:
            $ref: '#/definitions/GameUpdateBody'
      responses:
        '200':
          description: Successfully update a game
          schema:
            $ref: '#/definitions/GameResult'
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/Errors'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - games
      summary: "Remove a game specified by its id"
      operationId: deleteGameByGameId
      parameters:
        - $ref: '#/parameters/gameId'
      responses:
        204:
          description: "game successfully removed"
        404:
          description: "No game with this id"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
  /games/{gameId}/players:
    get:
      summary: Get a list of players in the game
      tags:
        - games
      description: get players by game id
      operationId: getPlayersBygameId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PlayerResource'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    post:
      summary: Add a new player in the game
      tags:
        - games
      consumes: 
        - application/json
      operationId: postPlayerInGame
      parameters:
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/gameId'
        - in: body
          name: requestBody
          schema:
            $ref: '#/definitions/PlayerInGamePostBody'
      responses:
        '201':
          description: Successfully add a player
          schema:
            $ref: '#/definitions/GameResult'
          headers:
            Location:
              type: string
              format: url
              description: Location of the newly created player
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
  /players:
    get:
      summary: Get the list of player
      tags:
        - players
      description: get the list of player
      operationId: getPlayers
      parameters: 
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PlayerResults'
        '404':
          description: Plyaer not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    post:
      summary: Create a new player
      tags:
        - players
      description: post a player with its information
      operationId: postPlayer
      parameters: 
        - $ref: '#/parameters/authorization'
        - in: body
          name: requestBody
          schema:
            $ref: '#/definitions/PlayerPostBody'
      responses:
        '201':
          description: Successfully create a player
          schema:
            $ref: '#/definitions/PlayerProfileResult'
          headers:
            Location:
              type: string
              format: url
              description: Location of the newly created player profile
        '404':
          description: Player not found
          schema:
            $ref: '#/definitions/Errors'
        '400':
          description: Invalid player object
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
  /game/{gameId}/players/{playerId}:
    get:
      summary: Info for a specific player in a game
      tags:
        - players
      description: get player by player id
      operationId: getPlayerByPlayerId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/playerId'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/PlayerResult'
        '404':
          description: Player not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
        - players
      summary: Update a player specified by its id
      operationId: patchPlayerByPlayerId
      consumes:
        - application/json
      parameters: 
        - $ref: '#/parameters/playerId'
        - $ref: '#/parameters/gameId'
        - name: updateBody
          in: body
          description: Object that will overwrite the player specified by its id
          required: true
          schema:
            $ref: '#/definitions/PlayerUpdateBody'
      responses:
        '200':
          description: Successfully update a Player
          schema:
            $ref: '#/definitions/PlayerResult'
        '400':
          description: Invalid player object
          schema:
            $ref: '#/definitions/Errors'
        '404':
          description: Player/Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - players
      summary: "Remove a player specified by its id"
      operationId: deletePlayerByPlayerId
      consumes:
        - "application/json"
      parameters:
        - $ref: '#/parameters/playerId'
        - $ref: '#/parameters/gameId'
      responses:
        204:
          description: "player successfully removed"
        404:
          description: "No player/game with this id"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
parameters:
  authorization:
    name: Authorization
    in: header
    type: string
    required: true
    description: '"Bearer [token]" where token is your OAuth2 access token'
  gameId:
    name: gameId
    in: path
    description: unique string
    required: true
    type: string
  playerId:
    name: playerId
    in: path
    description: ID of player to be updated
    required: true
    type: string
    pattern: '^g[1-9]\d*p[1-9]\d*$'
definitions:
  Card:
      properties:
        attributes:
          type: object
          properties:
            cardNumber:
              type: string
              enum: 
                - 'A'
                - '2'
                - '3'
                - '4'
                - '5'
                - '6'
                - '7'
                - '8'
                - '9'
                - '10'
                - 'J'
                - 'Q'
                - 'K'
            cardSuit:
              $ref: '#/definitions/CardSuit'
  CardSuit:
    type: string
    enum:
      - 'Diamond'
      - 'Club'
      - 'Spade'
      - 'Heart'
  Cards:
    type: array
    items:
      $ref: '#/definitions/Card'
  Error:
    properties:
      status:
        type: string
        description: HTTP status code
        example: '123'
      title:
        type: string
        description: A short, user readable summary of the error
        example: Not Found
      code:
        type: string
        description: An application-specific error code
        example: '1234'
      detail:
        type: string
        description: A long description of the error that may contain instance-specific details
      links:
        properties:
          about:
            type: string
            format: url
            description: A link to further information about the error
            example: https://developer.oregonstate.edu/documentation/error-reference#1234
  Errors:
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
  GameId:
    type: string
    description: A unique ID of a poker game
  GameList:
    type: array
    items:
      $ref: '#/definitions/GameResult'
  GamePostBody:
    properties:
      data:
        type: object
        properties:
          type:
            $ref: '#/definitions/GameType'
          attributes:
            type: object
            properties:
              playerIds:
                $ref: '#/definitions/PlayerIds'
              minimumBet:
                $ref: '#/definitions/MinimumBet'
              maximumBet:
                $ref: '#/definitions/MaximumBet'
            required:
              - playerIds
              - minimumBet
              - maximumBet
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
    required:
      - data
    additionalProperties: false
  GameResource:
    properties:
      id:
        $ref: '#/definitions/GameId'
      type:
        $ref: '#/definitions/GameType'
      attributes:
        type: object
        properties:
          round:
            $ref: '#/definitions/Round'
          playerIds:
            $ref: '#/definitions/PlayerIds'
          tableCards:
            $ref: '#/definitions/Cards'
      links:
        $ref: '#/definitions/SelfLink'
  GameResult:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/GameResource'
  GameType:
    type: string
    enum:
      - game
  GameUpdateBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/GameId'
          type:
            $ref: '#/definitions/GameType'
          attributes:
            type: object
            properties:
              round:
                $ref: '#/definitions/Round'
              playerIds:
                $ref: '#/definitions/PlayerIds'
              tableCards:
                $ref: '#/definitions/Cards'
            additionalProperties: false
        required: 
          - type
          - attributes
          - id
        additionalProperties: false
  IdType:
    type: string
    enum:
      - Id
  MaximumBet:
    type: integer
    minimum: 1
    description: The maximum bet every player can place each round.
    example: 2000
  MinimumBet:
    type: integer
    minimum: 1
    description: The minimum bet every player have to place at least each round.
    example: 1000
  Player:
    type: object
    properties:
      cards:
        $ref: '#/definitions/Cards'
      bet:
        $ref: '#/definitions/PlayerBet'
      status:
        $ref: '#/definitions/PlayerStatus'
  PlayerBet:
    type: integer
    minimum: 0
    description: Each player's bet
  PlayerEmail:
    type: string
    example: 'abc@efg.com'
  PlayerId:
    type: string
    example: '101'
  PlayerIds:
    type: array
    items:
      $ref: '#/definitions/PlayerId'
  PlayerInGamePostBody:
    properties:
      data:
        type: object
        properties:
          type:
            $ref: '#/definitions/IdType'
          attributes:
            type: object
            properties:
              playerId:
                $ref: '#/definitions/PlayerId'
            required:
              - playerId
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
    required:
      - data
    additionalProperties: false
  PlayerLevel:
    type: integer
    minimum: 1
    description: Player's level in the system.
    example: 20
  PlayerExpAboveCurrentLevel:
    type: integer
    minimum: 0
    description: Player's experience above current level.
    example: 1234
  PlayerName:
    type: string
    example: 'Jack'
  PlayerResult:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/PlayerResource'
  PlayerResults:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        type: array
        items:
          $ref: '#/definitions/PlayerResult'
  PlayerResource:
    properties:
      id:
        $ref: '#/definitions/PlayerId'
      type:
        $ref: '#/definitions/PlayerType'
      attributes:
        type: object
        properties:
          players:
            $ref: '#/definitions/Player'
  PlayerPassword:
    type: string
    example: 'hunter2'
  PlayerPostBody:
    properties:
      data:
        type: object
        properties:
          type:
            $ref: '#/definitions/PlayerType'
          attributes:
            type: object
            properties:
              playerName:
                $ref: '#/definitions/PlayerName'
              email:
                $ref: '#/definitions/PlayerEmail'
              password:
                $ref: '#/definitions/PlayerPassword'
            required:
              - playerName
              - email
              - password
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
    required:
      - data
    additionalProperties: false  
  PlayerProfileResult:
    properties:
      links:
        $ref: '#/definitions/SelfLink'
      data:
        $ref: '#/definitions/PlayerProfileResource'
  PlayerProfileResource:
    properties:
      id:
        $ref: '#/definitions/PlayerId'
      type:
        $ref: '#/definitions/PlayerType'
      attributes:
        type: object
        properties:
          playerName:
            $ref: '#/definitions/PlayerName'
          playerLevel:
            $ref: '#/definitions/PlayerLevel'
          playerExpAboveCurrentLevel:
            $ref: '#/definitions/PlayerExpAboveCurrentLevel'
          playerEmail:
            $ref: '#/definitions/PlayerEmail'
          playerPassword:
            $ref: '#/definitions/PlayerPassword'
      links:
        $ref: '#/definitions/SelfLink'
  PlayerStatus:
    type: string
    enum:
      - called
      - raised
      - checked
      - folded
  PlayerType:
    type: string
    enum:
      - player
  PlayerUpdateBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/PlayerId'
          type:
            $ref: '#/definitions/PlayerType'
          attributes:
            type: object
            properties:
              player:
                $ref: '#/definitions/Player'
            required:
              - player
            additionalProperties: false
        required: 
          - type
          - attributes
          - id
        additionalProperties: false
    required: 
      - data
    additionalProperties: false
  Round:
    type: string
    enum:
      - 'blind'
      - 'flop'
      - 'turn'
      - 'river'
      - 'showdown'
  SelfLink:
    properties:
      self:
        type: string
        format: url
        description: Self-link of current resource