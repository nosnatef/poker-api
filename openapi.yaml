swagger: '2.0'
info:
  title: Poker API
  description: Design for Poker API
  version: v1
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
schemes:
  - https
host: api.oregonstate.edu
basePath: /v1
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/poker-api
produces:
  - application/json
paths:
  /games:
    post:
      summary: Create a poker game
      tags:
        - games
      consumes:
        - application/json
      operationId: postGame
      parameters:
        - $ref: '#/parameters/authorization'
        - in: body
          name: requestBody
          schema:
            $ref: '#/definitions/gamePostBody'
      responses:
        '201':
          description: Successfully create a game
          schema:
            $ref: '#/definitions/gameResult'
          headers:
            Location:
              type: string
              format: url
              description: Location of the newly created game
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
    get:
      summary: Info of a list of game
      tags:
        - games
      operationId: getGames
      parameters: 
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/gameResults'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
  /games/{gameId}:
    get:
      summary: Info for a specific game
      tags:
        - games
      description: Get a game by its gameid
      operationId: getGameByGameId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/gameResult'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
    patch:
      tags:
        - games
      summary: Update a game specified by its id
      operationId: patchGameByGameId
      consumes:
        - application/json
      parameters: 
        - $ref: '#/parameters/gameId'
        - name: updateBody
          in: body
          description: Object that will overwrite the game specified by its id
          required: true
          schema:
            $ref: '#/definitions/gamePatchBody'
      responses:
        '200':
          description: Successfully update a game
          schema:
            $ref: '#/definitions/gameResult'
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
    delete:
      tags:
      - games
      summary: "Remove a game specified by its id"
      operationId: deleteGameByGameId
      parameters:
        - $ref: '#/parameters/gameId'
      responses:
        '204':
          description: game successfully removed
        '404':
          description: No game with this id
          schema:
            $ref: "#/definitions/error"
        '500':
          description: Internal server error
          schema:
            $ref: "#/definitions/error"
  /games/{gameId}/players/{playerId}:
    get:
      summary: Info of the player in terms of the specific game
      tags:
        - players
      operationId: getPlayerByGameIdAndPlayerId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/playerId'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/playerInGameResult'
        '404':
          description: Player not found
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
    patch:
      tags:
        - players
      summary: Update a player in terms of the specific game
      operationId: updatePlayerByGameIdAndPlayerId
      consumes: 
        - application/json
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/playerId'
        - $ref: '#/parameters/gameId'
        - name: updateBody
          in: body
          description: Object that will overwrite the player of interest
          required: true
          schema:
            $ref: '#/definitions/playerInGamePatchBody'
      responses:
        '200':
          description: Successfully update a player from game
          schema:
            $ref: '#/definitions/errors'
        '400':
          description: Invalid player in game object
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: Player not found.
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
  /players:
    get:
      summary: Info of the list of player
      tags:
        - players
      operationId: getPlayers
      parameters: 
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/playerResults'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
    post:
      summary: Create a player profile
      tags:
        - players
      operationId: postPlayer
      parameters: 
        - $ref: '#/parameters/authorization'
        - in: body
          name: requestBody
          schema:
            $ref: '#/definitions/playerPostBody'
      responses:
        '201':
          description: Successfully create a player profile
          schema:
            $ref: '#/definitions/playerResult'
          headers:
            Location:
              type: string
              format: url
              description: Location of the newly created player
        '400':
          description: Invalid player object
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
  /players/{playerId}:
    delete:
      summary: Delete a player specified by its playerId
      tags:
        - players
      operationId: deletePlayerByPlayerId
      consumes: 
        - application/json
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/playerId'
      responses:
        '204':
          description: Player successfully removed
        '404':
          description: No player with this id
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
    get:
      summary: Info for a specific player
      tags:
        - players
      description: Get a player by its playerId
      operationId: getPlayerByPlayerId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/playerId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/playerResult'
        '404':
          description: Player not found
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
    patch:
      summary: Update a player specified by its playerId
      tags:
        - players
      operationId: patchPlayerByPlayerId
      consumes: 
        - application/json
      parameters: 
        - $ref: '#/parameters/playerId'
        - $ref: '#/parameters/authorization'
        - name: updateBody
          in: body
          description: Object that will overwrite the player specified by its id
          required: true
          schema:
            $ref: '#/definitions/playerPatchBody'
      responses:
        '200':
          description: Successfully update a player
          schema:
            $ref: '#/definitions/playerResult'
        '400':
          description: Invalid player object
          schema:
            $ref: '#/definitions/errors'
        '404':
          description: Player not found
          schema:
            $ref: '#/definitions/errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/errors'
parameters:
  authorization:
    name: Authorization
    in: header
    type: string
    required: true
    description: '"Bearer [token]" where token is your OAuth2 access token'
  gameId:
    name: gameId
    in: path
    description: unique string
    required: true
    type: string
  playerId:
    name: playerId
    in: path
    description: unique string
    required: true
    type: string
definitions:
  betPool:
    type: integer
    minimum: 0
    description: Total bet from players.
  card:
      properties:
        attributes:
          type: object
          properties:
            cardNumber:
              type: string
              enum: 
                - 'A'
                - '2'
                - '3'
                - '4'
                - '5'
                - '6'
                - '7'
                - '8'
                - '9'
                - '10'
                - 'J'
                - 'Q'
                - 'K'
            CardSuit:
              type: string
              enum:
                - Diamond
                - Club
                - Spade
                - Heart
  cards:
    properties:
      cards:
        type: array
        items:
          $ref: '#/definitions/card'
  error:
    properties:
      status:
        type: string
        description: HTTP status code
        example: '123'
      title:
        type: string
        description: A short, user readable summary of the error
        example: Not Found
      code:
        type: string
        description: An application-specific error code
        example: '1234'
      detail:
        type: string
        description: A long description of the error that may contain instance-specific details
      links:
        properties:
          about:
            type: string
            format: url
            description: A link to further information about the error
            example: https://developer.oregonstate.edu/documentation/error-reference#1234
  errors:
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/error'
  gameId:
    type: string
    description: A unique ID of a poker game
  gameIds:
    type: array
    items:
      $ref: '#/definitions/gameId'
  gamePatchBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/gameId'
          type:
            $ref: '#/definitions/gameType'
          attributes:
            type: object
            properties:
              round:
                $ref: '#/definitions/round'
              playerIds:
                $ref: '#/definitions/playerIds'
              minimumBet:
                $ref: '#/definitions/minimumBet'
              maximumBet:
                $ref: '#/definitions/maximumBet'
              betPool:
                $ref: '#/definitions/betPool'
              tableCards:
                $ref: '#/definitions/cards'
            required:
              - id
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
  gamePostBody:
    properties:
      data:
        type: object
        properties:
          type:
            $ref: '#/definitions/gameType'
          attributes:
            type: object
            properties:
              playerIds:
                $ref: '#/definitions/playerIds'
              minimumBet:
                $ref: '#/definitions/minimumBet'
              maximumBet:
                $ref: '#/definitions/maximumBet'
            required:
              - playerIds
              - minimumBet
              - maximumBet
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
    required:
      - data
    additionalProperties: false
  gameResource:
    properties:
      id:
        $ref: '#/definitions/gameId'
      type:
        $ref: '#/definitions/gameType'
      attributes:
        type: object
        properties:
          round:
            $ref: '#/definitions/round'
          playerIds:
            $ref: '#/definitions/playerIds'
          minimumBet:
            $ref: '#/definitions/minimumBet'
          maximumBet:
            $ref: '#/definitions/maximumBet'
          betPool:
            $ref: '#/definitions/betPool'
          tableCards:
            $ref: '#/definitions/cards'
      links:
        $ref: '#/definitions/selfLink'
  gameResult:
    properties:
      data:
        $ref: '#/definitions/gameResource'
  gameResults:
    type: array
    items:
      $ref: "#/definitions/gameResult"
  gameType:
    type: string
    enum:
      - game
  maximumBet:
    type: integer
    minimum: 1
    description: The maximum bet every player can place each round.
    example: 2000
  minimumBet:
    type: integer
    minimum: 1
    description: The minimum bet every player have to place at least each round.
    example: 1000
  playerBet:
    type: integer
    minimum: 0
    description: The bet from a specific player.
  playerEmail:
    type: string
    example: abc@efg.com
    format: email
  playerExpAboveLevel:
    type: integer
    minimum: 0
    description: Player's experience point above current level.
    example: 1234
  playerId:
    type: string
    example: '101'
  playerIds:
    type: array
    items:
      $ref: '#/definitions/playerId'
  playerInGamePatchBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/playerId'
          type:
            $ref: '#/definitions/playerType'
          attributes:
            type: object
            properties:
              playerBet:
                $ref: '#/definitions/playerBet'
              playerStatus:
                $ref: '#/definitions/playerStatus'
              playerCards:
                $ref: '#/definitions/cards'
            additionalProperties: false
            required:
              - id
              - type
        additionalProperties: false
    required:
      - data
    additionalProperties: false
  playerInGameResource:
    properties:
      id:
        $ref: '#/definitions/playerId'
      type:
        $ref: '#/definitions/playerType'
      attributes:
        type: object
        properties:
          playerName:
            $ref: '#/definitions/playerName'
          playerLevel:
            $ref: '#/definitions/playerLevel'
          playerExpAboveLevel:
            $ref: '#/definitions/playerExpAboveLevel'
          playerBet:
            $ref: '#/definitions/playerBet'
          playerStatus:
            $ref: '#/definitions/playerStatus'
          playerCards:
            $ref: '#/definitions/cards'
  playerInGameResult:
    properties:
      data:
        $ref: '#/definitions/playerInGameResource'
  playerLevel:
    type: integer
    minimum: 1
    description: Player's level in the system.
    example: 20
  playerName:
    type: string
    example: Jack
  playerPassword:
    type: string
    example:  hunter2
    format: password
  playerPatchBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/playerId'
          type:
            $ref: '#/definitions/playerType'
          attributes:
            type: object
            properties:
              playerName:
                $ref: '#/definitions/playerName'
              playerEmail:
                $ref: '#/definitions/playerEmail'
              playerPassword:
                $ref: '#/definitions/playerPassword'
              playerLevel:
                $ref: '#/definitions/playerLevel'
              playerExpAboveLevel:
                $ref: '#/definitions/playerExpAboveLevel'
              gameIds:
                $ref: '#/definitions/gameIds'
            additionalProperties: false
        required: 
          - id
          - type
        additionalProperties: false
  playerPostBody:
    properties:
      data:
        type: object
        properties:
          type:
            $ref: '#/definitions/playerType'
          attributes:
            type: object
            properties:
              playerName:
                $ref: '#/definitions/playerName'
              playerEmail:
                $ref: '#/definitions/playerEmail'
              playerPassword:
                $ref: '#/definitions/playerPassword'
            required:
              - playerName
              - playerEmail
              - playerPassword
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
    required: 
      - data
    additionalProperties: false 
  playerResource:
    properties:
      id:
        $ref: '#/definitions/playerId'
      type:
        $ref: '#/definitions/playerType'
      attributes:
        type: object
        properties:
          PlayerName:
            $ref: '#/definitions/playerName'
          PlayerEmail:
            $ref: '#/definitions/playerEmail'
          PlayerLevel:
            $ref: '#/definitions/playerLevel'
          PlayerExpAboveLevel:
            $ref: '#/definitions/playerExpAboveLevel'
          GameIds:
            $ref: '#/definitions/gameIds'
      links:
        $ref: '#/definitions/selfLink'
  playerResult:
    properties:
      data:
        $ref: '#/definitions/playerResource'
  playerResults:
    type: array
    items:
      $ref: '#/definitions/playerResult'
  playerStatus:
    type: string
    enum:
      - folded
      - called
      - raised
      - checked
  playerType:
    type: string
    enum:
      - player
  round:
    type: string
    enum:
      - blind
      - flop
      - turn
      - river
      - showdown
  selfLink:
    properties:
      self:
        type: string
        format: url
        description: Self-link of current resource