swagger: '2.0'
info:
  title: Poker API
  description: Design for Poker API
  version: v1
  license:
    name: GNU Affero General Public License Version 3
    url: http://www.gnu.org/licenses/agpl-3.0.en.html
  contact:
    name: IS Data Architecture Team
    url: https://is.oregonstate.edu/data-architecture
    email: isdataarchitecture@oregonstate.edu
schemes:
  - https
host: api.oregonstate.edu
basePath: /v1
externalDocs:
  description: GitHub Repository
  url: https://github.com/osu-mist/poker-api
produces:
  - application/json
paths:
  /games:
    post:
      summary: Create a poker game
      tags:
        - games
      consumes:
        - application/json
      operationId: postGame
      parameters:
        - $ref: '#/parameters/authorization'
        - in: body
          name: requestBody
          schema:
            $ref: '#/definitions/GamePostBody'
      responses:
        '201':
          description: Successfully create a game
          schema:
            $ref: '#/definitions/GameResult'
          headers:
            Location:
              type: string
              format: url
              description: Location of the newly created game
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    get:
      summary: Info of a list of game
      tags:
        - games
      operationId: getGames
      parameters: 
        - $ref: '#/parameters/authorization'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GameResults'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
  /games/{gameId}:
    get:
      summary: Info for a specific game
      tags:
        - games
      description: Get a game by its gameid
      operationId: getGameByGameId
      parameters: 
        - $ref: '#/parameters/authorization'
        - $ref: '#/parameters/gameId'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/GameResult'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    patch:
      tags:
        - games
      summary: Update a game specified by its id
      operationId: patchGameByGameId
      consumes:
        - application/json
      parameters: 
        - $ref: '#/parameters/gameId'
        - name: updateBody
          in: body
          description: Object that will overwrite the game specified by its id
          required: true
          schema:
            $ref: '#/definitions/GamePatchBody'
      responses:
        '200':
          description: Successfully update a game
          schema:
            $ref: '#/definitions/GameResult'
        '400':
          description: Invalid game object
          schema:
            $ref: '#/definitions/Errors'
        '404':
          description: Game not found
          schema:
            $ref: '#/definitions/Errors'
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Errors'
    delete:
      tags:
      - games
      summary: "Remove a game specified by its id"
      operationId: deleteGameByGameId
      parameters:
        - $ref: '#/parameters/gameId'
      responses:
        204:
          description: "game successfully removed"
        404:
          description: "No game with this id"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
parameters:
  authorization:
    name: Authorization
    in: header
    type: string
    required: true
    description: '"Bearer [token]" where token is your OAuth2 access token'
  gameId:
    name: gameId
    in: path
    description: unique string
    required: true
    type: string
definitions:
  BetPool:
    type: integer
    minimum: 0
    description: Total bet from players.
  Card:
      properties:
        attributes:
          type: object
          properties:
            CardNumber:
              type: string
              enum: 
                - A
                - 2
                - 3
                - 4
                - 5
                - 6
                - 7
                - 8
                - 9
                - 10
                - J
                - Q
                - K
            CardSuit:
              type: string
              enum:
                - Diamond
                - Club
                - Spade
                - Heart
  Cards:
    type: array
    items:
      $ref: '#/definitions/Card'
  Error:
    properties:
      status:
        type: string
        description: HTTP status code
        example: '123'
      title:
        type: string
        description: A short, user readable summary of the error
        example: Not Found
      code:
        type: string
        description: An application-specific error code
        example: '1234'
      detail:
        type: string
        description: A long description of the error that may contain instance-specific details
      links:
        properties:
          about:
            type: string
            format: url
            description: A link to further information about the error
            example: https://developer.oregonstate.edu/documentation/error-reference#1234
  Errors:
    properties:
      errors:
        type: array
        items:
          $ref: '#/definitions/Error'
  GameId:
    type: string
    description: A unique ID of a poker game
  GamePatchBody:
    properties:
      data:
        type: object
        properties:
          id:
            $ref: '#/definitions/GameId'
          type:
            $ref: '#/definitions/GameType'
          attributes:
            type: object
            properties:
              Round:
                $ref: '#/definitions/Round'
              PlayerIds:
                $ref: '#/definitions/PlayerIds'
              MinimumBet:
                $ref: '#/definitions/MinimumBet'
              MaximumBet:
                $ref: '#/definitions/MaximumBet'
              BetPool:
                $ref: '#/definitions/BetPool'
              TableCards:
                $ref: '#/definitions/Cards'
            required:
              - id
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
  GamePostBody:
    properties:
      data:
        type: object
        properties:
          type:
            $ref: '#/definitions/GameType'
          attributes:
            type: object
            properties:
              PlayerIds:
                $ref: '#/definitions/PlayerIds'
              MinimumBet:
                $ref: '#/definitions/MinimumBet'
              MaximumBet:
                $ref: '#/definitions/MaximumBet'
            required:
              - PlayerIds
              - MinimumBet
              - MaximumBet
            additionalProperties: false
        required: 
          - type
          - attributes
        additionalProperties: false
    required:
      - data
    additionalProperties: false
  GameResource:
    properties:
      id:
        $ref: '#/definitions/GameId'
      type:
        $ref: '#/definitions/GameType'
      attributes:
        type: object
        properties:
          Round:
            $ref: '#/definitions/Round'
          PlayerIds:
            $ref: '#/definitions/PlayerIds'
          MinimumBet:
            $ref: '#/definitions/MinimumBet'
          MaximumBet:
            $ref: '#/definitions/MaximumBet'
          BetPool:
            $ref: '#/definitions/BetPool'
          TableCards:
            $ref: '#/definitions/Cards'
      links:
        $ref: '#/definitions/SelfLink'
  GameResult:
    properties:
      data:
        $ref: '#/definitions/GameResource'
  GameResults:
    type: array
    items:
      $ref: "#/definitions/GameResult"
  GameType:
    type: string
    enum:
      - game
  MaximumBet:
    type: integer
    minimum: 1
    description: The maximum bet every player can place each round.
    example: 2000
  MinimumBet:
    type: integer
    minimum: 1
    description: The minimum bet every player have to place at least each round.
    example: 1000
  PlayerId:
    type: string
    example: '101'
  PlayerIds:
    type: array
    items:
      $ref: '#/definitions/PlayerId'
  Round:
    type: string
    enum:
      - blind
      - flop
      - turn
      - river
      - showdown
  SelfLink:
    properties:
      self:
        type: string
        format: url
        description: Self-link of current resource